using Microsoft.EntityFrameworkCore;
using CarRentalApi.Core.Entities;
using CarRentalApi.Core.Enums;

namespace CarRentalApi.Infrastructure.Persistence;

/// <summary>
/// EF Core DbContext for the Car Rental system.
/// </summary>
public class CarRentalDbContext : DbContext
{
    public DbSet<Car> Cars => Set<Car>();
    public DbSet<Customer> Customers => Set<Customer>();
    public DbSet<Rental> Rentals => Set<Rental>();
    public DbSet<AdditionalFee> AdditionalFees => Set<AdditionalFee>();
    public DbSet<CarTypePricing> CarTypePricings => Set<CarTypePricing>();

    public CarRentalDbContext(DbContextOptions<CarRentalDbContext> options) : base(options) { }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Rental>()
            .HasMany(r => r.AdditionalFees)
            .WithOne()
            .OnDelete(DeleteBehavior.Cascade);

        // All Ids are never generated by the database (GUIDs set in code)
        // Required to fix: DbUpdateConcurrencyException
        // Info: https://learn.microsoft.com/en-us/answers/questions/2122543/microsoft-entityframeworkcore-dbupdateconcurrencye
        modelBuilder.Entity<Rental>().Property(r => r.Id).ValueGeneratedNever();
        modelBuilder.Entity<Car>().Property(c => c.Id).ValueGeneratedNever();
        modelBuilder.Entity<Customer>().Property(c => c.Id).ValueGeneratedNever();
        modelBuilder.Entity<AdditionalFee>().Property(f => f.Id).ValueGeneratedNever();
        modelBuilder.Entity<CarTypePricing>().Property(p => p.Id).ValueGeneratedNever();

        modelBuilder.Entity<Car>()
            .Property(c => c.CarType)
            .HasConversion<int>(); // Map CarTypeEnum as int

        modelBuilder.Entity<CarTypePricing>()
            .Property(p => p.CarType)
            .HasConversion<int>(); // Map CarTypeEnum as int

        // Create lookup table for CarTypeEnum
        modelBuilder.Entity<CarTypeEnumLookup>().HasData(
            Enum.GetValues(typeof(CarTypeEnum))
                .Cast<CarTypeEnum>()
                .Select(e => new CarTypeEnumLookup { Id = (int)e, Name = e.ToString() })
        );
    }
}
